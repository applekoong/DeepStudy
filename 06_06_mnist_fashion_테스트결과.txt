1. 처음에는 단일 모델을 다양한 형태로 만들오서 테스트
2. 최종적으로는 결과가 좋았던 단일 모델을 앙상블로 연동
3. 앙상블 적용해서 94.3% 달성. 맨 아래 앙상블 결과 저장

# ------------------------------------------------------------- #


# 64*3, 128*3, 512, 256, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 27/100
54000/54000 [==============================] - 15s 280us/sample - loss: 0.1079 - acc: 0.9635 - val_loss: 0.1959 - val_acc: 0.9323
Epoch 28/100
54000/54000 [==============================] - 15s 278us/sample - loss: 0.1065 - acc: 0.9636 - val_loss: 0.1962 - val_acc: 0.9318
10000/10000 [==============================] - 1s 111us/sample - loss: 0.2186 - acc: 0.9270
[0.2186207592740655, 0.927]


# 32*3, 64*3, 512, 256, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 35/100
54000/54000 [==============================] - 8s 154us/sample - loss: 0.1500 - acc: 0.9474 - val_loss: 0.2175 - val_acc: 0.9212
Epoch 36/100
54000/54000 [==============================] - 8s 150us/sample - loss: 0.1494 - acc: 0.9472 - val_loss: 0.2164 - val_acc: 0.9210
10000/10000 [==============================] - 1s 67us/sample - loss: 0.2280 - acc: 0.9205
[0.2280040671646595, 0.9205]


# 128*3, 256*3, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 12/100
54000/54000 [==============================] - 32s 597us/sample - loss: 0.1160 - acc: 0.9595 - val_loss: 0.1955 - val_acc: 0.9330
Epoch 13/100
54000/54000 [==============================] - 32s 597us/sample - loss: 0.1119 - acc: 0.9612 - val_loss: 0.1955 - val_acc: 0.9305
10000/10000 [==============================] - 2s 236us/sample - loss: 0.2148 - acc: 0.9275
[0.21478603985905648, 0.9275]


# 64*3, 128*3, 256*3, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 11/100
54000/54000 [==============================] - 42s 771us/sample - loss: 0.1224 - acc: 0.9566 - val_loss: 0.2096 - val_acc: 0.9253
Epoch 12/100
54000/54000 [==============================] - 41s 768us/sample - loss: 0.1170 - acc: 0.9592 - val_loss: 0.2101 - val_acc: 0.9293
10000/10000 [==============================] - 3s 289us/sample - loss: 0.2256 - acc: 0.9256
[0.2255601940691471, 0.9256]


# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 21/100
54000/54000 [==============================] - 21s 390us/sample - loss: 0.0895 - acc: 0.9699 - val_loss: 0.1955 - val_acc: 0.9337
Epoch 22/100
54000/54000 [==============================] - 21s 395us/sample - loss: 0.0877 - acc: 0.9708 - val_loss: 0.1933 - val_acc: 0.9350
10000/10000 [==============================] - 2s 162us/sample - loss: 0.2079 - acc: 0.9317
[0.20791810819804668, 0.9317]


# 64*2, 128*2, 256, 256, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 64, epochs 100 es 5
Epoch 29/100
54000/54000 [==============================] - 20s 365us/sample - loss: 0.1081 - acc: 0.9630 - val_loss: 0.1870 - val_acc: 0.9345
Epoch 30/100
54000/54000 [==============================] - 20s 365us/sample - loss: 0.1071 - acc: 0.9635 - val_loss: 0.1865 - val_acc: 0.9340
10000/10000 [==============================] - 2s 150us/sample - loss: 0.2081 - acc: 0.9292
[0.2080831465780735, 0.9292]


# 64*2, 128*2, 256, 256, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1
# batch 32, epochs 100 es 5
Epoch 36/100
54000/54000 [==============================] - 27s 494us/sample - loss: 0.1291 - acc: 0.9552 - val_loss: 0.1903 - val_acc: 0.9318
Epoch 37/100
54000/54000 [==============================] - 27s 494us/sample - loss: 0.1284 - acc: 0.9554 - val_loss: 0.1907 - val_acc: 0.9288
10000/10000 [==============================] - 2s 154us/sample - loss: 0.2090 - acc: 0.9283
[0.2090488518461585, 0.9283]


# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(conv, fc)
# batch 64, epochs 100 es 5
Epoch 10/100
54000/54000 [==============================] - 34s 632us/sample - loss: 0.0557 - acc: 0.9827 - val_loss: 0.1889 - val_acc: 0.9383
Epoch 11/100
54000/54000 [==============================] - 35s 641us/sample - loss: 0.0501 - acc: 0.9848 - val_loss: 0.1898 - val_acc: 0.9407
10000/10000 [==============================] - 2s 173us/sample - loss: 0.2147 - acc: 0.9340
[0.21473460490107538, 0.934]


# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(conv only)
# batch 64, epochs 100 es 5
Epoch 11/100
54000/54000 [==============================] - 32s 596us/sample - loss: 14.5036 - acc: 0.1002 - val_loss: 14.5305 - val_acc: 0.0985
Epoch 12/100
54000/54000 [==============================] - 32s 592us/sample - loss: 14.5036 - acc: 0.1002 - val_loss: 14.5305 - val_acc: 0.0985
10000/10000 [==============================] - 2s 172us/sample - loss: 14.5063 - acc: 0.1000
[14.50628757019043, 0.1]


# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
Epoch 12/100
54000/54000 [==============================] - 29s 531us/sample - loss: 0.0620 - acc: 0.9805 - val_loss: 0.1819 - val_acc: 0.9393
Epoch 13/100
54000/54000 [==============================] - 29s 537us/sample - loss: 0.0557 - acc: 0.9833 - val_loss: 0.1869 - val_acc: 0.9397
10000/10000 [==============================] - 2s 171us/sample - loss: 0.2072 - acc: 0.9373
[0.2072307630315423, 0.9373]


# 64*2, 128*2, 512, 512, 10 (베스트 결과 저장해서 확인)
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
Epoch 11/100
54000/54000 [==============================] - 24s 440us/sample - loss: 0.0367 - acc: 0.9903 - val_loss: 0.2174 - val_acc: 0.9337
10000/10000 [==============================] - 2s 195us/sample - loss: 0.2088 - acc: 0.9310
[0.20879974764734507, 0.931]


# 128*2, 256*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
Epoch 9/100
54000/54000 [==============================] - 46s 851us/sample - loss: 0.0270 - acc: 0.9937 - val_loss: 0.1870 - val_acc: 0.9395
10000/10000 [==============================] - 4s 356us/sample - loss: 0.2130 - acc: 0.9357
[0.21304195422772318, 0.9357]


# 128*3, 256*3, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
Epoch 11/100
54000/54000 [==============================] - 69s 1ms/sample - loss: 0.0460 - acc: 0.9872 - val_loss: 0.1811 - val_acc: 0.9378
10000/10000 [==============================] - 5s 527us/sample - loss: 0.2027 - acc: 0.9369
[0.20268844164013863, 0.9369]

# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 dropout(0.5, fc only)
# batch 64, epochs 100 es 5
Epoch 31/100
54000/54000 [==============================] - 27s 500us/sample - loss: 0.1822 - acc: 0.9380 - val_loss: 0.2104 - val_acc: 0.9280
Epoch 32/100
54000/54000 [==============================] - 27s 499us/sample - loss: 0.1832 - acc: 0.9373 - val_loss: 0.2077 - val_acc: 0.9273
10000/10000 [==============================] - 2s 159us/sample - loss: 0.2297 - acc: 0.9228
[0.22965268246531487, 0.9228]


# 64*2, 128*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 32, epochs 100 es 5
Epoch 9/100
54000/54000 [==============================] - 28s 518us/sample - loss: 0.0869 - acc: 0.9708 - val_loss: 0.1915 - val_acc: 0.9327
Epoch 10/100
54000/54000 [==============================] - 28s 520us/sample - loss: 0.0807 - acc: 0.9725 - val_loss: 0.1867 - val_acc: 0.9343
10000/10000 [==============================] - 2s 153us/sample - loss: 0.2016 - acc: 0.9331
[0.20155984069257973, 0.9331]


# 64*2, 128*2, 512, 512, 256, 256, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 32, epochs 100 es 5
54000/54000 [==============================] - 30s 561us/sample - loss: 0.0969 - acc: 0.9674 - val_loss: 0.1822 - val_acc: 0.9367
Epoch 10/100
54000/54000 [==============================] - 31s 568us/sample - loss: 0.0905 - acc: 0.9683 - val_loss: 0.1795 - val_acc: 0.9390
Epoch 11/100
54000/54000 [==============================] - 30s 564us/sample - loss: 0.0832 - acc: 0.9724 - val_loss: 0.1819 - val_acc: 0.9385
10000/10000 [==============================] - 2s 160us/sample - loss: 0.2042 - acc: 0.9343
[0.20420785003602504, 0.9343]


# ------------------------------------------------------------------ #
# 앞의 결과에서 잘 나온 모델 선택해서 앙상블 적용

# 128*2, 256*2, 512, 512, 10
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
0 : 0.9382
1 : 0.9345
2 : 0.937
3 : 0.9381
4 : 0.9375
5 : 0.9367
6 : 0.9369
7 : 0.9358
8 : 0.9348
9 : 0.9384
--------------------------------------------------
9 : 0.9432


# 128*3, 256*3, 512, 512, 7
# RMSprop(lr=0.001, decay=0.01) v_split=0.1 batch_norm(fc only)
# batch 64, epochs 100 es 5
0 : 0.9348
1 : 0.9342
2 : 0.9353
3 : 0.9348
4 : 0.9302
5 : 0.9348
6 : 0.9375
--------------------------------------------------
6 : 0.9411
